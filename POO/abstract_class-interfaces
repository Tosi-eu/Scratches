Classes abstratas

• As classes que utilizamos até agora são classes
concretas: sua instanciação cria um objeto

• Abstratas: classes que são modelos, mas que não se
transformam em objetos concretos

• Classes que definem comportamentos “genéricos:

	– Parcialmente, ou totalmente, implementada
	– Não podem ser instanciadas
	– Detalhes são definidos em subclasses especializadas

Classe abstrata (ou virtual): classe que possui, pelo
menos, um método abstrato
– reune características comuns que os descendentes devem
ter (ou satisfazer)
– modelo (de requisitos) para classes descendentes

Método abstrato:
	● Só pode ser declarado em uma classe abstrata
	● Não é implementado na classe onde é definido
	● Obrigatoriamente implementado em toda classe herdeira
	● Determina um padrão para as classes herdeiras

Um método abstrato obriga o programador a redefinir
esse método em todas as subclasses.

Classes abstratas Duas finalidades para abstract:
	1) O método na classe mãe não faz sentido, por exemplo:
		class Forma{
				public float calculaArea(){
				 return -1.0f; }
				}
			}

2) O programador poderia não implementar o método na classe herdeira, o que acarretaria problemas de funcionalidade.

Solução:

	abstract class Forma{
				public abstract float calculaArea();
			}

Resultado:
O programador é obrigado a redefinir o método calculaArea, do
contrário, não poderá ter classes herdeiras utilizáveis.

Interfaces: polimorfismo sem herança

Definição:
- Conjunto de assinaturas de métodos
- Apenas assinaturas, sem implementação
- Contrato firmado para garantir um conjunto de
funcionalidades

Uso:
1. Capturar similaridades de comportamento entre classes
não relacionadas
2. Superclasse abstrata não seria natural, pois não há
“parentesco” entre as classes
3. Exigir métodos que uma ou mais classes não relacionadas
devem necessariamente implementar
4. Revelar uma interface de programação sem revelar as
classes que a usam

Em Java: uma interface é uma classe abstrata pura
	• Só tem métodos abstratos (sem implementações)
	 Todos os métodos são public e abstract
	• Sem atributos, a não ser constantes (public, static, e final)
	• Sem construtores

Exemplo
● Em um sistema de gerenciamento de empresas:

Empregado
	Nome
	Valor_hora
	Horas_trabalhadas 

ContaAPagar
	Tipo
	Vencimento
	Valor_a_pagar
	Desconto_ate_vencimento

● Semanticamente possuem pouco, ou nada, em comum
● Entretanto, os objetos de ambas representam uma despesa
que deve ser quitada no final do mês
● Cada objeto, não importa a classe, deve ser capaz de
“calcular o valor total de pagamento”

● Cabe a seguinte interface:

interface Pagavel {
double getValorPagamento();
}

● Fazer com que ambas as classes implementem esta
interface e, consequentemente, tenham que implementar o
método getValorPagamento

● Polimorfismo resultante
	class Empregado implements Pagavel{
	...
	double getValorPagamento(){...código...}
	}
	class ContaAPagar implements Pagavel{
	...
	double getValorPagamento(){...outro código...}

● Polimorfismo resultante

Pagavel[] ps = new Pagavel[2];
ps[0] = new Empregado();
ps[1] = new ContaAPagar();
double soma = 0;
for (int i=0; i < ps.length; i++)
soma += ps[i].getValorPagamento();
Interfaces -> POLIMORFISMO!

- Em Java, uma classe pode satisfazer a várias interfaces
- Dizemos que a classe “implementa” essas interfaces
- Ela deve implementar todos os métodos de cada interface
- Se assemelha a herança múltipla

Exemplo: classe Classificador com um método ordena(), que faz a ordenação de objetos de outras classes

-O método ordena() implementa um algoritmo que compara os elementos usando o método bool eMaiorQue()

-Toda classe que quiser ter ordenação de seus objetos deve implementar o método bool eMaiorQue()

 Esta funcionalidade existe em Java por meio do método Collection.sort() e da interface Comparable

Vantagens:
	- Deixa código mais reutilizável
	- Provê ocultamento da informação
	- Provê interface comum que classes devem implementar
	- *Cuidado*: Não é possível acrescentar métodos a uma interface já
			em uso, as classes que a implementam não compilarão mais.

Diferença entre classes abstratas e interfaces
Classe abstrata 							Interface
Pode implementar métodos 					Não implementa nenhum método (a não ser default estatic)
Define hierarquia que possui relação (“é-um”)		Não define uma hierarquia(subclasses sem relação)
Classe pode ser subclasse de apenas uma classe abstrata
Uma classe pode implementar múltiplas interfaces

 A partir do Java 8, além dos métodos abstratos, dois outros
tipos:
 default: acrescenta métodos a interfaces já em uso sem
quebrar a compatibilidade;
 static: define métodos que não dependem de instanciação.
 Devem conter implementação dentro da própria interface
